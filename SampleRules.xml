<?xml version="1.0" encoding="UTF-8" ?>

<!-- Sample EventDistiller 2.0 rules.
     By Janak J Parekh (jjp32@cs.columbia.edu) and 
        Enrico Buonnano (eb659@cs.columbia.edu)

     Copyright 2001 Trustees of Columbia University in the City of New York.
     All Rights Reserved.
-->

<rulebase xmlns="http://www.psl.cs.columbia.edu/2001/01/DistillerRule.xsd">

<!-- The spamblocker rule.  If we receive two "spam" notifications from the
     same person, send out appropriate notifications. 

     Note that this rule has instantiation'1', so that a new instance is 
     created only when the previous instance has succeeded or timed out. 
     note also that the second event is absorbed, if matched -->

<rule name="spamblocker" instantiation="2">
   <states>
      <state name="a" timebound="-1" children="b">
        <attribute name="from" value="*1"/>
	<attribute name="spam" value="true"/>
      </state>
      <state name="b" timebound="100" children="" actions="A,B" fail_actions="F" absorb="true">
        <attribute name="from" value="*1"/>
	<attribute name="spam" value="true"/>
      </state>
   </states>
   <actions>
      <notification name="A">
         <attribute name="spamblock" value="*1"/>
      </notification>
      <!-- test multiple notifications - and loopback! -->
      <notification name="B">
         <attribute name="spamblock" value="*1"/>
	 <attribute name="internal" value="true"/>
      </notification>
      <!-- test failure notifications -->
      <notification name="F">
	 <attribute name="spamblocker_failure" value="true"/>
      </notification>
   </actions>
</rule>


<!-- The loop rule. Illustrates how you can specify that one event
     happens any number of times (by setting count="-1"), 
     until some 'end' event happens  -->

<rule name="loop" instantiation="1">
   <states>
      <state name="start" timebound="-1" children="loop">
        <attribute name="event" value="loop"/>
      </state>
      <state name="loop" timebound="100" children="end" count="-1" absorb="true" fail_actions="F">
        <attribute name="event" value="loop"/>
      </state>
      <state name="end" timebound="100" actions="S" fail_actions="F"><!-- fail_actions are not sent here -->
        <attribute name="event" value="end"/>
      </state>
   </states>
   <actions>
      <notification name="S">
         <attribute name="reached_end" value="true"/>
      </notification>
      <notification name="F">
	 <attribute name="reached_end" value="false"/>
      </notification>
   </actions>
</rule>

<!-- The hexagon rule. Illustrates how OR conditions are implemented. 
     The graph for this rule is like:
                    c - d
                   /     \
              a - b       g - h --> A
                   \     /
                    e - f                           
     The action associated with state 'h' will be sent if any sequence of events
     that contains as a subset the sequence 'abcdgh' or 'abefgh' is received,
     within the appropriate timebounds.    -->

<rule name="hexagon" position="0" instantiation="2">
   <states>
      <state name="a" timebound="-1" children="b" actions="" fail_actions="F">
        <attribute name="event" value="a"/>
      </state>
      <state name="b" timebound="10" children="c,e" actions="" fail_actions="F">
	<attribute name="event" value="b"/>
      </state>
      <state name="c" timebound="10" children="d" actions="" fail_actions="F">
        <attribute name="event" value="c"/>
      </state>
      <state name="d" timebound="10" children="g" actions="" fail_actions="F">
        <attribute name="event" value="d"/>
      </state>
      <state name="e" timebound="10" children="f" actions="" fail_actions="F">
        <attribute name="event" value="e"/>
      </state>
      <state name="f" timebound="10" children="g" actions="" fail_actions="F">
        <attribute name="event" value="f"/>
      </state>
      <state name="g" timebound="10" children="h" actions="" fail_actions="F">
        <attribute name="event" value="g"/>
      </state>
      <state name="h" timebound="10" children="" actions="A" fail_actions="F">
        <attribute name="event" value="h"/>
      </state>
   </states>
   <actions>
      <notification name="A">
         <attribute name="hex" value="true"/>
      </notification>
      <notification name="F">
         <attribute name="hex_failure" value="true"/>
      </notification>
   </actions>
</rule>
</rulebase>